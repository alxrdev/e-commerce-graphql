type Query {
  hello: String!

  # Category
  categories: [Category!]!
  category(id: ID!): Category

  # Product
  products(filter: ProductsFilterInput): [Product!]!
  product(id: ID!): Product
}

type Mutation {
  # Category
  addCategory(input: AddCategoryInput!): CategoryResult!
  updateCategory(id: ID!, input: UpdateCategoryInput!): CategoryResult!
  deleteCategory(id: ID!): Boolean!

  # Product
  addProduct(input: AddProductInput!): ProductResult!
  updateProduct(id: ID!, input: UpdateProductInput!): ProductResult!
  deleteProduct(id: ID!): Boolean!

  # Review
  addReview(input: AddReviewInput!): ReviewResult!
  updateReview(id: ID!, input: UpdateReviewInput!): ReviewResult!
  deleteReview(id: ID!): Boolean!
}

type Error {
  message: String!
  path: String
  value: String
}

type InvalidInput {
  invalidInputs: [Error!]!
}

type Category {
  id: ID!
  name: String!
  products(filter: ProductsFilterInput): [Product!]!
}

union CategoryResult = Category | InvalidInput

input AddCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  name: String!
}

type Product {
  id: ID!
  name: String!
  description: String!
  image: String!
  quantity: Int!
  price: Float!
  onSale: Boolean!
  category: Category
  reviews: [Review!]!
}

union ProductResult = Product | InvalidInput

input ProductsFilterInput {
  onSale: Boolean
  avgRating: Int
}

input AddProductInput {
  name: String!
  description: String!
  image: String!
  quantity: Int!
  price: Float!
  onSale: Boolean!
  categoryId: ID
}

input UpdateProductInput {
  name: String
  description: String
  image: String
  quantity: Int
  price: Float
  onSale: Boolean
  categoryId: ID
}

type Review {
  id: ID!
  date: String!
  title: String!
  comment: String!
  rating: Int!
}

union ReviewResult = Review | InvalidInput

input AddReviewInput {
  date: String!
  title: String!
  comment: String!
  rating: Int!
  productId: String!
}

input UpdateReviewInput {
  date: String!
  title: String!
  comment: String!
  rating: Int!
}
